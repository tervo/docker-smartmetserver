##################################################################
# smartmet-engine-grid
##################################################################

# This is a configuration file used by the module
# smartmet-engine-grid. The SmartMet server's configuration
# file for the "grid" engine should point to this file.

##################################################################



# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file.

@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "grid-engine/base.conf"
@endif


smartmet :
{
library :
{

grid-files :
{
  # Processing of grid/grib files requires a lot of configuration information.
  # This information should be found from the file below.

  configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"

  # If the data server is local then the grid file cache can be used to improve
  # performance. This cache is used caching uncompressed grid data when the original
  # data compression is slow. The grid data is first cached as uncompressed data.
  # If the cached data is not accessed for awhile it will be compressed (with
  # a fast compression) and still kept in the cache. When the cache is full
  # then the oldest data is automatically removed.

  cache :
  {
    numOfGrids                     = 50000
    maxUncompressedSizeInMegaBytes = 10000
    maxCompressedSizeInMegaBytes   = 10000
   }
}

} # library


engine :
{
grid :
{

# The content server defines the source of the content information. In practice,
# the master source of the content information is the Redis database. However,
# it is not fast enough for our purposes. That's why its information is cached
# to a memory based content server. This cache server can be a remote content
# server that is used over CORBA connection, or it can be embedded ("local") into
# the grid engine. The cache content server is very fast but it uses a lot of
# memory. That's why it usually makes sense to use the remote cache server if
# that is possible. On the other hand this means that the grid engine can
# start much faster because it does not need to cache content information first.

content-server :
{
  ######  The remote content server. Notice that the remote content server has its own configuration file.

  remote  = true
  ior     = "$(CORBA_CONTENT_SERVER_IOR)"


  ######  The local content server. These settings are valid when the "remote" attribute is "false".

  # The master source of the content information is the Redis database.

  redis :
  {
    address      = "$(REDIS_CONTENT_SERVER_ADDRESS)"
    port         = $(REDIS_CONTENT_SERVER_PORT)
    tablePrefix  = "$(REDIS_CONTENT_SERVER_TABLE_PREFIX)"
  }

  processing-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/contentServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }

  debug-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/contentServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }

  cache :
  {
    # Content sorting flags:
    # -------------------
    #  bit 0 (1)  : reserved
    #  bit 1 (2)  : Sort by fmi-id (radonParameterId)
    #  bit 2 (4)  : Sort by fmi-name (radonParameterName)
    #  bit 3 (8)  : Sort by grib-id
    #  bit 4 (16) : Sort by newbase-id
    #  bit 5 (32) : Sort by newbase-name
    #  bit 6 (64) : Sort by cdm-id
    #  bit 7 (128): Sort by cdm-name

  # (1 + 4)
    contentSortingFlags = 13
  }
}



# The data server is responsible for fetching actual data from the grid files. It is possible
# to use a local or a remote data server. The data server uses also a lot of memory and maps
# grid files into virtual memory. That's why it would be smarter to use shared data servers
# when possible. On the other hand, the remote data server is usually always up and running
# which means that it can be used immediately. If the data server is local then it
# takes some time to start the system and make sure that all grid files are available.
# If the remote data server is disabled then the local data server is used in the engine.

data-server :
{
  ######  The remote data server. Notice that the remote data server has its own configuration file.

  remote  = true
  caching = false
  ior     = "$(CORBA_DATA_SERVER_IOR)"


  ######  The local data server. These settings are valid when the "remote" attribute is "false".

  # Location of grid files.

  grid-storage :
  {
    directory = "$(GRID_FILE_STORAGE_DIR)"
    preloadEnabled = false
  }


  # The data server can generate "virtual grid files" that are based on
  # existing grid files. The definition file is used in order to define
  # requirements (= required parameters) and rules (= LUA function) for
  # new virtual files.

  virtualFiles :
  {
    enabled = false
    definitionFile = "%(DIR)/vff_convert.csv"
  }

  # LUA files are usually needed for generating content for the virtual
  # files. In practice, each virtual file definition contains the name
  # of the LUA function that needs to be called when the data of
  # the current virtual file is requested.

  luaFiles =
  [
    "%(DIR)/vff_convert.lua"
  ];

  processing-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/dataServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }

  debug-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/dataServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}


# The query server is responsible for making data queries to the data server according
# to the content information that it gets from the content server. Also the query server
# can be local or remote. Sometimes it is smarter to locate the query server closer to
# the content server and the data server, because there might be a lot traffic between them.
# If the remote query server is disabled then the local query server is used in the engine.

query-server :
{
  remote  = false
  ior     = "$(CORBA_QUERY_SERVER_IOR)"

  producerFile = "$(GRID_ENGINE_PRODUCER_FILE)"
  producerAliasFile = "%(DIR)/producerAlias.cfg"

  # If the gridEngine notices that there are not valid mappings available for all
  # parameters found from the contentServer, then it automatically adds these unmapped
  # parameters to the following files. The queryServer needs these mappings in order to
  # find the current parameters. You can move these automatically generated mappings into
  # a more permanent mapping file (mappings_fmi_auto.csv => mappings_fmi.csv). On the other
  # hand, when the permanent mapping files are empty then you can get your basic mapping
  # settings from these automatically generated files (i.e. when you are first time
  # configuring your system).


  # 1 = FMI_ID, 2 = FMI_NAME, 3 = GRIB_ID, 4 = NEWBASE_ID, 5 = NEWBASE_NAME, 6 = CDM_ID, 7 = CDM_NAME

  mappingTargetKeyType = 2

  mappingUpdateFile :
  {
    fmi     = "%(DIR)/mapping_fmi_auto.csv"
    newbase = "%(DIR)/mapping_newbase_auto.csv"
  }

  luaFiles =
  [
    "%(DIR)/function_basic.lua",
    "%(DIR)/function_interpolation.lua",
    "%(DIR)/function_conversion.lua",
    "%(DIR)/function_newbase.lua",
    "%(DIR)/function_demo.lua"
  ];

  mappingFiles =
  [
    "%(DIR)/mapping_fmi.csv",
    "%(DIR)/mapping_fmi_auto.csv",
    "%(DIR)/mapping_newbase.csv",
    "%(DIR)/mapping_newbase_auto.csv",
    "%(DIR)/mapping_virtual.csv"
  ];

  aliasFiles =
  [
    "%(DIR)/alias_demo.cfg",
    "%(DIR)/alias_newbase_extension.cfg"
  ];

  processing-log :
  {
    enabled      = true
    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }

  debug-log :
  {
    enabled      = true
#    file         = "/dev/stdout"
    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}

}
}
}
