################################################################## 
# smartmet-tools-grid : corbaQueryServer
##################################################################


# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file. 

@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "$(HOME)/workspace/smartmet-tools-grid/cfg/smartmet-dev-env.cfg"
@endif


# This information is needed for initializing the grid-library. 

smartmet.library.grid-files.configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"


smartmet :
{
tools :
{
grid :
{

content-server :
{
  ######  The remote content server.
  
  ior     = "$(CORBA_CONTENT_SERVER_IOR)"
 
  processing-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_ENGINE_LOG_DIR)/contentServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_ENGINE_LOG_DIR)/contentServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}



data-server :
{
  ######  The remote data server. Notice that the remote data server has its own configuration file.
  
  ior     = "$(CORBA_DATA_SERVER_IOR)"

  processing-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "$(GRID_ENGINE_LOG_DIR)/dataServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "$(GRID_ENGINE_LOG_DIR)/dataServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}


# The query server is responsible for making data queries to the data server according
# to the content information that it gets from the content server. 

query-server :
{
  address = "$(CORBA_QUERY_SERVER_ADDRESS)"
  port    = "$(CORBA_QUERY_SERVER_PORT)"

  # Write the service IOR to the file
  
  iorFile = "/dev/stdout"


  producerFile = "$(GRID_ENGINE_PRODUCER_FILE)"
  producerAliasFile = "$(GRID_ENGINE_CONFIG_DIR)/producerAlias.cfg"
   
  # If the gridEngine notices that there are not valid mappings available for all
  # parameters found from the contentServer, then it automatically adds these unmapped
  # parameters to the following files. The queryServer needs these mappings in order to
  # find the current parameters. You can move these automatically generated mappings into
  # a more permanent mapping file (mappings_fmi_auto.csv => mappings_fmi.csv). On the other
  # hand, when the permanent mapping files are empty then you can get your basic mapping
  # settings from these automatically generated files (i.e. when you are first time 
  # configuring your system).
    
  # 1 = FMI_ID, 2 = FMI_NAME, 3 = GRIB_ID, 4 = NEWBASE_ID, 5 = NEWBASE_NAME, 6 = CDM_ID, 7 = CDM_NAME
  
  mappingTargetKeyType = 2 

  mappingUpdateFile :
  {
    fmi     = "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_auto.csv"
    newbase = "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_auto.csv"
  }
  
  luaFiles = 
  [
    "$(GRID_ENGINE_CONFIG_DIR)/function_basic.lua",
    "$(GRID_ENGINE_CONFIG_DIR)/function_interpolation.lua",
    "$(GRID_ENGINE_CONFIG_DIR)/function_conversion.lua",
    "$(GRID_ENGINE_CONFIG_DIR)/function_newbase.lua",
    "$(GRID_ENGINE_CONFIG_DIR)/function_demo.lua"
  ];
  
  mappingFiles =
  [
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_auto.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_auto.csv",
    "$(GRID_ENGINE_CONFIG_DIR)/mapping_virtual.csv"
  ];

  aliasFiles =
  [
    "$(GRID_ENGINE_CONFIG_DIR)/alias_demo.cfg",
    "$(GRID_ENGINE_CONFIG_DIR)/alias_newbase_extension.cfg"
  ];

  processing-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}

}
}
}
